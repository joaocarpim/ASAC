# Configuração global de auth (pode ser ajustado depois para produção)
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# Usuário
type User
  @model
  @auth(
    rules: [
      # ✅ Regra de "dono" explícita (CORREÇÃO APLICADA)
      { allow: owner, ownerField: "owner", operations: [read, update] }
      { allow: groups, groups: ["Admins"], operations: [create, read, update, delete] }
    ]
  ) {
  id: ID! @primaryKey
  owner: String # ✅ Campo adicionado para o ID do dono (CORREÇÃO APLICADA)
  name: String!
  email: String! @index(name: "byEmail")
  role: String! # "user" ou "admin"
  coins: Int
  points: Int
  modulesCompleted: [Int] # Verifique se este tipo está correto (talvez [String] ou String?)
  currentModule: Int
  precision: Float
  correctAnswers: Int
  wrongAnswers: Int
  timeSpent: String
  achievements: [Achievement] @hasMany(indexName: "byUser", fields: ["id"])
  progress: [Progress] @hasMany(indexName: "byUser", fields: ["id"])
}

# Conquistas
type Achievement
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }]) {
  id: ID!
  title: String!
  description: String!
  user: User @belongsTo(fields: ["userId"])
  userId: ID! @index(name: "byUser")
  moduleNumber: Int
}

# Progresso do usuário em um módulo
type Progress
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }]) {
  id: ID!
  user: User @belongsTo(fields: ["userId"])
  userId: ID! @index(name: "byUser")
  module: Module @belongsTo(fields: ["moduleId"])
  moduleId: ID! @index(name: "byModule")
  accuracy: Float
  correctAnswers: Int
  wrongAnswers: Int
  timeSpent: String # Considere usar Int para segundos
  completed: Boolean
  # errorDetails: [ErrorDetailInput] # Se precisar salvar erros detalhados
}

# Módulo
type Module
  @model
  @auth(rules: [{ allow: private, operations: [read] }]) { # private = usuários logados (Cognito ou IAM)
  id: ID!
  title: String!
  description: String!
  moduleNumber: Int!
  lessons: [Lesson] @hasMany(indexName: "byModule", fields: ["id"])
  questions: [Question] @hasMany(indexName: "byModule", fields: ["id"])
  progress: [Progress] @hasMany(indexName: "byModule", fields: ["id"])
}

# Lições
type Lesson
  @model
  @auth(rules: [{ allow: private, operations: [read] }]) {
  id: ID!
  title: String!
  content: String!
  image: String # Pode ser chave S3 ou URL
  lessonNumber: Int!
  module: Module @belongsTo(fields: ["moduleId"])
  moduleId: ID! @index(name: "byModule", sortKeyFields: ["lessonNumber"])
}

# Questões
type Question
  @model
  @auth(rules: [{ allow: private, operations: [read] }]) {
  id: ID!
  questionText: String!
  options: [String!]!
  correctAnswerIndex: Int!
  module: Module @belongsTo(fields: ["moduleId"])
  moduleId: ID! @index(name: "byModule")
}

# Símbolos Braille
type BrailleSymbol
  @model
  @auth(rules: [{ allow: private, operations: [read] }]) {
  id: ID!
  letter: String!
  description: String!
  imageKey: String! # Chave para buscar no S3 Storage
}

# Mutation customizada para registrar usuário via Lambda
type Mutation {
  adminRegisterUser(name: String!, email: String!, password: String!): String
    @function(name: "AdminRegisterUser-${env}")
    @auth(rules: [{ allow: groups, groups: ["Admins"] }]) # Protegendo a mutação
}

# (Opcional: Tipo para detalhes de erro no Progresso)
# input ErrorDetailInput {
#   questionId: String!
#   questionText: String
#   userAnswer: String
#   expectedAnswer: String
# }