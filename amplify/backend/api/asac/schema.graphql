# Configuração global de auth
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # TESTE SOMENTE, remova em produção
# === Usuário ===
type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [read, update] }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID! @primaryKey
  owner: String
  name: String!
  email: String! @index(name: "byEmail")
  role: String! # "user" ou "admin"
  coins: Int
  points: Int
  modulesCompleted: [Int]
  currentModule: Int
  precision: Float
  correctAnswers: Int
  wrongAnswers: Int
  timeSpent: String
  achievements: [Achievement] @hasMany(indexName: "byUser", fields: ["id"])
  progress: [Progress] @hasMany(indexName: "byUser", fields: ["id"])
}

# === Conquistas ===
type Achievement
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }]) {
  id: ID!
  title: String!
  description: String!
  user: User @belongsTo(fields: ["userId"])
  userId: ID! @index(name: "byUser")
  moduleNumber: Int
}

# === Progresso do usuário ===
type Progress
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admins"] }]) {
  id: ID!
  user: User @belongsTo(fields: ["userId"])
  userId: ID! @index(name: "byUser")
  module: Module @belongsTo(fields: ["moduleId"])
  moduleId: ID! @index(name: "byModule")
  accuracy: Float
  correctAnswers: Int
  wrongAnswers: Int
  timeSpent: String
  completed: Boolean
}

# === Módulo ===
type Module
  @model
  @auth(
    rules: [
      # ✅ permite leitura para usuários autenticados (Cognito)
      { allow: private, operations: [read] }
      # ✅ administradores podem gerenciar módulos
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  title: String!
  description: String!
  moduleNumber: Int!
  lessons: [Lesson] @hasMany(indexName: "byModule", fields: ["id"])
  questions: [Question] @hasMany(indexName: "byModule", fields: ["id"])
  progress: [Progress] @hasMany(indexName: "byModule", fields: ["id"])
}

# === Lições ===
type Lesson
  @model
  @auth(
    rules: [
      # ✅ usuários logados podem ler lições
      { allow: private, operations: [read] }
      # ✅ admins podem gerenciar
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  title: String!
  content: String!
  image: String
  lessonNumber: Int!
  module: Module @belongsTo(fields: ["moduleId"])
  moduleId: ID! @index(name: "byModule", sortKeyFields: ["lessonNumber"])
}

# === Questões ===
type Question
  @model
  @auth(
    rules: [
      # ✅ leitura liberada para usuários autenticados
      { allow: private, operations: [read] }
      # ✅ total controle para admins
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  questionText: String!
  options: [String!]!
  correctAnswerIndex: Int!
  module: Module @belongsTo(fields: ["moduleId"])
  moduleId: ID! @index(name: "byModule")
}

# === Símbolos Braille ===
type BrailleSymbol
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  letter: String!
  description: String!
  imageKey: String!
}

# === Mutations personalizadas ===
type Mutation {
  adminRegisterUser(name: String!, email: String!, password: String!): String
    @function(name: "AdminRegisterUser-${env}")
    @auth(rules: [{ allow: groups, groups: ["Admins"] }])
}
